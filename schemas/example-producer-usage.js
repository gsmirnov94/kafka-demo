// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã User –≤ Producer —Å–µ—Ä–≤–∏—Å–µ
// –≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Schema Registry —Å Producer

const { Kafka } = require('kafkajs');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SCHEMA_REGISTRY_URL = 'http://localhost:8081';
const KAFKA_BROKER = 'localhost:9092';
const TOPIC_NAME = 'user-topic';
const SUBJECT_NAME = 'user-value';

// Kafka –∫–ª–∏–µ–Ω—Ç
const kafka = new Kafka({
  clientId: 'user-producer-with-schema',
  brokers: [KAFKA_BROKER]
});

const producer = kafka.producer();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –∏–∑ Schema Registry
async function getSchemaFromRegistry() {
  try {
    const response = await axios.get(
      `${SCHEMA_REGISTRY_URL}/subjects/${SUBJECT_NAME}/versions/latest`
    );
    console.log('‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Schema Registry:', response.data.schema);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ö–µ–º–µ
function validateUserData(userData) {
  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ avsc –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
  if (!userData.name || typeof userData.name !== 'string') {
    throw new Error('–ü–æ–ª–µ name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  }
  
  if (!userData.age || typeof userData.age !== 'number' || userData.age < 0) {
    throw new Error('–ü–æ–ª–µ age –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è email
  if (userData.email && typeof userData.email !== 'string') {
    throw new Error('–ü–æ–ª–µ email –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å—Ö–µ–º—ã
async function sendUserMessage(userData) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validateUserData(userData);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∏–∑ Registry
    const schemaInfo = await getSchemaFromRegistry();
    if (!schemaInfo) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –∏–∑ Schema Registry');
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = {
      topic: TOPIC_NAME,
      messages: [
        {
          key: `user-${Date.now()}`,
          value: JSON.stringify({
            ...userData,
            schemaVersion: schemaInfo.version,
            timestamp: new Date().toISOString()
          })
        }
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka
    await producer.send(message);
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ User –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      user: userData,
      schemaVersion: schemaInfo.version,
      topic: TOPIC_NAME
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    return false;
  }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function examples() {
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka
  await producer.connect();
  console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Kafka');
  
  // –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ v1
  console.log('\nüì§ –ü—Ä–∏–º–µ—Ä 1: –û—Ç–ø—Ä–∞–≤–∫–∞ User v1');
  await sendUserMessage({
    name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
    age: 25
  });
  
  // –ü—Ä–∏–º–µ—Ä 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ v2
  console.log('\nüì§ –ü—Ä–∏–º–µ—Ä 2: –û—Ç–ø—Ä–∞–≤–∫–∞ User v2');
  await sendUserMessage({
    name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
    age: 30,
    email: 'anna@example.com'
  });
  
  // –ü—Ä–∏–º–µ—Ä 3: User v2 –±–µ–∑ email
  console.log('\nüì§ –ü—Ä–∏–º–µ—Ä 3: –û—Ç–ø—Ä–∞–≤–∫–∞ User v2 –±–µ–∑ email');
  await sendUserMessage({
    name: '–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤',
    age: 28
  });
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  await producer.disconnect();
  console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Kafka');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ (–µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
if (require.main === module) {
  examples().catch(console.error);
}

module.exports = {
  sendUserMessage,
  validateUserData,
  getSchemaFromRegistry
}; 